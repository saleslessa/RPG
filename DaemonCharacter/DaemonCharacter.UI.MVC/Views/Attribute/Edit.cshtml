@model DaemonCharacter.Application.ViewModels.Attribute.AttributeViewModel

@{
    ViewBag.Title = "Edit Attribute";
}

@section CustomStyle {
    @Styles.Render("~/bundles/Sprite/Acoes")
}

<section class="fullheight page-attribute">
    <h3 class="animated wow fadeInUp" data-wow-delay="0.2s">
        <i class="sprite sprite-Edit-Item animated wow fadeInDown div-icon"></i>
        &nbsp;Edit Attribute&nbsp;@Html.Raw(Model.AttributeName)
    </h3>
    <div class="form-horizontal">
        <hr />
        <div id="MessageSummary">
            @Html.Partial("_MessageSummary")
        </div>
        @Html.HiddenFor(model => model.AttributeId)

        <div class="form-group">
            @Html.LabelFor(model => model.AttributeName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.AttributeName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AttributeName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AttributeDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.AttributeDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AttributeDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AttributeType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EnumDropDownListFor(model => model.AttributeType, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AttributeType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="div-minimum">
            @Html.LabelFor(model => model.AttributeMinimum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.AttributeMinimum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AttributeMinimum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Bonus To:</label>
            <div class="col-md-4">
                @{Html.RenderPartial("_ListAvailableAttributeForBonus", Model.AttributeBonus);}
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <a href="~/Attribute" title="List">
                    <span class="sprite sprite-List-Item animated wow fadeInDown div-icon"></span>
                    &nbsp;<span>List</span>
                </a> |
                <input type="button" name="SaveAttribute" value="Save" class="btn btn-success" />
            </div>
        </div>
    </div>
</section>

@section Scripts {
    @Scripts.Render("~/Scripts/Attribute.js")
    @Scripts.Render("~/bundles/dataTables")
    <script type="text/javascript">

        function InitTable() {

            var table = jQuery('#TableBonus');

            /* Fixed header extension: http://datatables.net/extensions/scroller/ */

            var oTable = table.dataTable({
                "dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // datatable layout without  horizobtal scroll
                "scrollY": "300",
                "deferRender": true,
                "order": [
                    [0, 'asc']
                ],
                "lengthMenu": [
                    [5, 15, 20, -1],
                    [5, 15, 20, "All"] // change per page values here
                ],
                "pageLength": 10 // set the initial value
            });


            var tableWrapper = jQuery('#TableBonus'); // datatable creates the table wrapper by adding with id {your_table_jd}_wrapper
            tableWrapper.find('.dataTables_length select').select2(); // initialize select2 dropdown
        }

        // Table Init
        InitTable();

    </script>
}
