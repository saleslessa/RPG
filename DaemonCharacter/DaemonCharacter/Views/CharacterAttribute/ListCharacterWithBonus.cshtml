@model IEnumerable<DaemonCharacter.Models.CharacterAttributeModel>


@{
    ViewBag.type = string.Empty;
}

@foreach (var items in Model)
{
    if (string.IsNullOrEmpty(ViewBag.type) || ViewBag.type != items.attribute.type.name)
    {
        <h3>@Html.Raw(items.attribute.type.name)</h3>
    }

    <div title="@Html.Raw(items.attribute.description)" style="text-align:right;">

        @Html.DisplayName(items.attribute.name)
        <input type="number" class="dynamic-input-detail" id="ValAttr_@Html.Raw(items.idAttribute)" readonly="readonly" value="@Html.Raw(items.value)">

        @{
            ViewBag.result = 0;
            ViewBag.description = "";
        }

        @foreach (var subitem in items.bonusValues)
                {
                    ViewBag.description = ViewBag.description + subitem.attribute.name + ": "
                        + subitem.value.ToString()
                        + "\n";
                    ViewBag.result = ViewBag.result + subitem.value;
                }

        <input type="number" title="@ViewBag.description" class="dynamic-input-detail" id="BonusAttr_@Html.Raw(items.idAttribute)" readonly="readonly" value="@ViewBag.result" min="@ViewBag.result">

        @{
            ViewBag.result = ViewBag.result + items.value;
        }
        <input type="number" class="dynamic-input-detail" id="TotalAttr_@Html.Raw(items.idAttribute)" readonly="readonly" value="@ViewBag.result" min="@ViewBag.result">
    </div>
                ViewBag.type = items.attribute.type.name;
            }

<p class="messages" id="CharacterAttributeMessage"></p>

